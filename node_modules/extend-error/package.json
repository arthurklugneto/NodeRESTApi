{
  "_args": [
    [
      {
        "raw": "extend-error",
        "scope": null,
        "escapedName": "extend-error",
        "name": "extend-error",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Volumes/Work/Development/NodeJS/PostAPI"
    ]
  ],
  "_from": "extend-error@latest",
  "_id": "extend-error@0.0.2",
  "_inCache": true,
  "_location": "/extend-error",
  "_npmUser": {
    "name": "jayyvis",
    "email": "jayyvis@gmail.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "extend-error",
    "scope": null,
    "escapedName": "extend-error",
    "name": "extend-error",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/extend-error/-/extend-error-0.0.2.tgz",
  "_shasum": "9f1c72d3b26472b42152386bebbdfab865a143a2",
  "_shrinkwrap": null,
  "_spec": "extend-error",
  "_where": "/Volumes/Work/Development/NodeJS/PostAPI",
  "author": {
    "name": "Jayy Vis",
    "email": "jayyvis@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jayyvis/extend-error/issues"
  },
  "dependencies": {},
  "description": "Easily define custom error types in Node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9f1c72d3b26472b42152386bebbdfab865a143a2",
    "tarball": "https://registry.npmjs.org/extend-error/-/extend-error-0.0.2.tgz"
  },
  "homepage": "https://github.com/jayyvis/extend-error#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "jayyvis",
      "email": "jayyvis@gmail.com"
    }
  ],
  "name": "extend-error",
  "optionalDependencies": {},
  "readme": "# extend-error\n\nEver tried to create custom error types in Node.js and wished it should be this simple?\n\n```\nvar MyError = Error.extend('MyError');\n```\n\n```\nthrow MyError('wow')\n```\n\n### installation\n\n```\nnpm install extend-error\n```\n\nand in your app.js, just ```require('extend-error')```. It will provide you an extend() method for the Error type.\n\n\n\n### syntax\n- extend() takes two arguments : subTypeName & errorCode [optional]\n- it returns the newly created error type\n\n\n### more examples for a web app\n\n\nsomething useful\n\n```\nvar AppError = Error.extend('AppError', 500);\nvar ClientError = Error.extend('ClientError', 400);\n```\n\nextend ClientError further for specific http types\n\n```\nvar HttpNotFound = ClientError.extend('HttpNotFoundError', 404);\nvar HttpUnauthorized = ClientError.extend('HttpUnauthorized', 401);\n```\n\n### throwing errors\n\n```\nthrow new AppError('unable to connect db due to error: ' + err);\n\nthrow new ClientError({'message':'required field missing', field: 'email'})\n\nthrow new HttpNotFound('no post found with id: ' + id);\n\nthrow new HttpNotFound({'message': 'no such post', 'id': id});\n```\n\n### don't worry when you forget 'new'\n\n```\nthrow ClientError('bad request');\n```\n\n### instanceof\n\nthrow an error in controller\n\n```\nvar err = HttpNotFound('user profile not found');\n\nthrow err; \n(or)\ncallback(err)\n```\n\nhandle it easily in global error handler (in case of express.js error middleware)\n\n```\nif (err instanceof ClientError) {\n\t//send out the actual message\n\tres.send(err.code, err.message);\n} else {\n\t//send out a generic message\n\tres.send(500, 'oops! something went wrong');\n\tlog.error(err);\n}\n\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jayyvis/extend-error.git"
  },
  "version": "0.0.2"
}
